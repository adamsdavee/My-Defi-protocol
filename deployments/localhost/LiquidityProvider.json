{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WEDU",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LiquidityProvider__InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityProvider__InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFactory__IdenticalAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFactory__ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfTokenADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfTokenBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokenB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x11eb8290e96e46dc4bac7cf46de4692d21633b6cd52b2551bd14bbab768348a9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1491695",
    "logsBloom": "0x
    "blockHash": "0x7adc23588df031381be6c0ab822460e6a203ace9fb5fa747ed9e8fac36b74703",
    "transactionHash": "0x11eb8290e96e46dc4bac7cf46de4692d21633b6cd52b2551bd14bbab768348a9",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1491695",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 1,
  "solcInputHash": "f9a316581dcb960980b1cbc1c6a9db10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WEDU\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LiquidityProvider__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityProvider__InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFactory__IdenticalAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFactory__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokenADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokenBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/LiquidityProvider.sol\":\"LiquidityProvider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/core/LiquidityProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IFactory.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./interfaces/IWedu.sol\\\";\\r\\nimport \\\"./libraries/Library.sol\\\";\\r\\n\\r\\nerror LiquidityProvider__InsufficientAmount();\\r\\nerror LiquidityProvider__InsufficientOutputAmount();\\r\\nerror LiquidityProvider__EDUTransferFailed();\\r\\n\\r\\ncontract LiquidityProvider {\\r\\n    address private immutable factoryAddress;\\r\\n    address private immutable WEDU;\\r\\n\\r\\n    constructor(address _factoryAddress, address _WEDU) {\\r\\n        factoryAddress = _factoryAddress;\\r\\n        WEDU = _WEDU;\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 amountOfTokenADesired,\\r\\n        uint256 amountOfTokenBDesired,\\r\\n        uint256 minTokenA,\\r\\n        uint256 minTokenB\\r\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\r\\n        address pair = IFactory(factoryAddress).getTokenPairs(_tokenA, _tokenB);\\r\\n        if (pair == address(0))\\r\\n            pair = IFactory(factoryAddress).createPool(_tokenA, _tokenB);\\r\\n\\r\\n        (uint256 reserveA, uint256 reserveB) = IPool(pair).getTokenReserves();\\r\\n\\r\\n        if (reserveA == 0 && reserveB == 0) {\\r\\n            (amountA, amountB) = (amountOfTokenADesired, amountOfTokenBDesired);\\r\\n        } else {\\r\\n            uint256 optimalAmountOfTokenB = quote(\\r\\n                amountOfTokenADesired,\\r\\n                reserveA,\\r\\n                reserveB\\r\\n            );\\r\\n            if (optimalAmountOfTokenB <= amountOfTokenBDesired) {\\r\\n                if (optimalAmountOfTokenB < minTokenB)\\r\\n                    revert LiquidityProvider__InsufficientAmount();\\r\\n                (amountA, amountB) = (\\r\\n                    amountOfTokenADesired,\\r\\n                    optimalAmountOfTokenB\\r\\n                );\\r\\n            } else {\\r\\n                uint256 amountAOptimal = quote(\\r\\n                    amountOfTokenBDesired,\\r\\n                    reserveB,\\r\\n                    reserveA\\r\\n                );\\r\\n                assert(amountAOptimal <= amountOfTokenADesired);\\r\\n                if (amountAOptimal < minTokenA)\\r\\n                    revert LiquidityProvider__InsufficientAmount();\\r\\n                (amountA, amountB) = (amountAOptimal, amountOfTokenBDesired);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountOfTokenADesired,\\r\\n        uint256 amountOfTokenBDesired,\\r\\n        uint256 minTokenA,\\r\\n        uint256 minTokenB\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\r\\n        (amountA, amountB) = _addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            amountOfTokenADesired,\\r\\n            amountOfTokenBDesired,\\r\\n            minTokenA,\\r\\n            minTokenB\\r\\n        );\\r\\n        address pair = IFactory(factoryAddress).getTokenPairs(tokenA, tokenB);\\r\\n        IERC20(tokenA).transferFrom(msg.sender, pair, amountA);\\r\\n        IERC20(tokenB).transferFrom(msg.sender, pair, amountB);\\r\\n        liquidity = IPool(pair).mint(msg.sender);\\r\\n    }\\r\\n\\r\\n    // function addLiquidityEdu(\\r\\n    //     address tokenA\\r\\n    // ) external returns (uint256 amountA, uint256 amountEDU, uint256 liquidity) {\\r\\n    //    (amountA, amountEDU) = _addLiquidity();\\r\\n    //     address pair = IFactory(factoryAddress).getTokenPairs(tokenA, WEDU);\\r\\n    //     IERC20(tokenA).transferFrom(msg.sender, pair, amountA);\\r\\n    //     IWEDU(WEDU).deposit{value: amountEDU}();\\r\\n    //     assert(IWEDU(WEDU).transfer(pair, amountEDU));\\r\\n    //     liquidity = IPool(pair).mint(msg.sender);\\r\\n\\r\\n    //     if (msg.value > amountEDU)\\r\\n    //         (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\r\\n    //     if (!success) revert LiquidityProvider__EDUTransferFailed();\\r\\n    // }\\r\\n\\r\\n    // TODO: Remove liquidity & liquidityEdu\\r\\n\\r\\n    // Swapppp\\r\\n\\r\\n    function _swap(\\r\\n        uint256[] memory amounts,\\r\\n        address[] memory path,\\r\\n        address _pair,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0, ) = DefiLibrary.sortTokens(input, output);\\r\\n            uint256 amountOut = amounts[i + 1];\\r\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\r\\n                ? (amountOut, uint256(0))\\r\\n                : (uint256(0), amountOut);\\r\\n            /**TODO: In case of multiple hops */\\r\\n            IPool(_pair).swap(amountOut, amounts[i], _to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            /**address to*/\\r\\n            uint[] memory amounts\\r\\n        )\\r\\n    {\\r\\n        address pair = IFactory(factoryAddress).getTokenPairs(path[0], path[1]);\\r\\n\\r\\n        amounts = getAmountsOut(pair, amountIn, path);\\r\\n        if (amounts[amounts.length - 1] < amountOutMin)\\r\\n            revert LiquidityProvider__InsufficientOutputAmount();\\r\\n\\r\\n        IERC20(path[0]).transferFrom(msg.sender, pair, amounts[0]);\\r\\n        _swap(amounts, path, pair, msg.sender);\\r\\n    }\\r\\n\\r\\n    function quote(\\r\\n        uint amountA,\\r\\n        uint reserveA,\\r\\n        uint reserveB\\r\\n    ) internal pure returns (uint amountB) {\\r\\n        require(amountA > 0, \\\"UniswapV2DefiLibrary: INSUFFICIENT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveA > 0 && reserveB > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        amountB = (amountA * reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // function getAmountsOut() public view returns (uint256) {}\\r\\n\\r\\n    function getAmountsOut(\\r\\n        address pair,\\r\\n        uint amountIn,\\r\\n        address[] memory path\\r\\n    ) public view returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = IPool(pair).getTokenReserves();\\r\\n            amounts[i + 1] = DefiLibrary.getAmountOut(\\r\\n                amounts[i],\\r\\n                reserveIn,\\r\\n                reserveOut\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc2327fa2feb386da150dfd63492ebd452bf6889d3a14c23f865a1b6defe0c6ea\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IFactory {\\r\\n    function getTokenPairs(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address);\\r\\n\\r\\n    function createPool(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address poolPair);\\r\\n}\\r\\n\",\"keccak256\":\"0x8bbd69e305fd6a2654228e5baadb232eecf49604e8c18a9374c375ce58f18e4f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IPool {\\r\\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function init(address _tokenA, address _tokenB) external;\\r\\n\\r\\n    function mint(address _to) external returns (uint256);\\r\\n\\r\\n    function liquidateLpTokens(\\r\\n        address to\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function getTokenReserves() external view returns (uint256, uint256);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to /**bytes calldata data */\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x121ade41eccbda0c4e3acfe5553109c7fdb9bcd8222fe59651dd4c7ed133cd8e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IWedu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IWEDU {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd323664034d843e994baeb5c8a9b504c74aac2d8a1e9b40fbb0f992365a5c205\",\"license\":\"MIT\"},\"contracts/core/libraries/Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nerror PoolFactory__IdenticalAddress();\\r\\nerror PoolFactory__ZeroAddress();\\r\\n\\r\\nlibrary DefiLibrary {\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address token0, address token1) {\\r\\n        if (tokenA == tokenB) revert PoolFactory__IdenticalAddress();\\r\\n        (token0, token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        // since tokenA is the smaller address we can check if its == address(0);\\r\\n        if (token0 == address(0)) revert PoolFactory__ZeroAddress();\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        uint amountInWithFee = amountIn * 997;\\r\\n        uint numerator = amountInWithFee * reserveOut;\\r\\n        uint denominator = (reserveIn * 1000) + (amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0ec7587c327bfaad8331419c96c232c13ce6cea2f4701b58630edb0e63c5c0c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b9638038062001b96833981810160405281019062000037919062000111565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000158565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d982620000ac565b9050919050565b620000eb81620000cc565b8114620000f757600080fd5b50565b6000815190506200010b81620000e0565b92915050565b600080604083850312156200012b576200012a620000a7565b5b60006200013b85828601620000fa565b92505060206200014e85828601620000fa565b9150509250929050565b60805160a051611a076200018f600039600050506000818160f7015281816103280152818161079401526108680152611a076000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633351733f1461004657806386818f2614610078578063bb7b9c76146100a8575b600080fd5b610060600480360381019061005b9190610f5e565b6100d8565b60405161006f93929190610ffa565b60405180910390f35b610092600480360381019061008d9190611096565b610322565b60405161009f91906111c8565b60405180910390f35b6100c260048036038101906100bd9190611339565b6105df565b6040516100cf91906111c8565b60405180910390f35b60008060006100eb89898989898961078d565b809350819450505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a70f02e8b8b6040518363ffffffff1660e01b81526004016101509291906113b7565b6020604051808303816000875af115801561016f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019391906113f5565b90508973ffffffffffffffffffffffffffffffffffffffff166323b872dd3383876040518463ffffffff1660e01b81526004016101d293929190611422565b6020604051808303816000875af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190611491565b508873ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b815260040161025393929190611422565b6020604051808303816000875af1158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190611491565b508073ffffffffffffffffffffffffffffffffffffffff16636a627842336040518263ffffffff1660e01b81526004016102d091906114be565b6020604051808303816000875af11580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906114ee565b91505096509650969350505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a70f02e858560008181106103765761037561151b565b5b905060200201602081019061038b919061154a565b8686600181811061039f5761039e61151b565b5b90506020020160208101906103b4919061154a565b6040518363ffffffff1660e01b81526004016103d19291906113b7565b6020604051808303816000875af11580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041491906113f5565b90506104628187868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506105df565b915084826001845161047491906115a6565b815181106104855761048461151b565b5b602002602001015110156104c5576040517fdec0fbbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360008181106104d9576104d861151b565b5b90506020020160208101906104ee919061154a565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33838560008151811061051f5761051e61151b565b5b60200260200101516040518463ffffffff1660e01b815260040161054593929190611422565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190611491565b506105d682858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508333610a75565b50949350505050565b6060600282511015610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90611637565b60405180910390fd5b815167ffffffffffffffff811115610641576106406111fb565b5b60405190808252806020026020018201604052801561066f5781602001602082028036833780820191505090505b50905082816000815181106106875761068661151b565b5b60200260200101818152505060005b600183516106a491906115a6565b811015610785576000808673ffffffffffffffffffffffffffffffffffffffff1663b9cf50056040518163ffffffff1660e01b81526004016040805180830381865afa1580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c9190611657565b915091506107458484815181106107365761073561151b565b5b60200260200101518383610bff565b846001856107539190611697565b815181106107645761076361151b565b5b6020026020010181815250505050808061077d906116cb565b915050610696565b509392505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a70f02e8a8a6040518363ffffffff1660e01b81526004016107ed9291906113b7565b6020604051808303816000875af115801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906113f5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610907577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e34336158a8a6040518363ffffffff1660e01b81526004016108c19291906113b7565b6020604051808303816000875af11580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090491906113f5565b90505b6000808273ffffffffffffffffffffffffffffffffffffffff1663b9cf50056040518163ffffffff1660e01b81526004016040805180830381865afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190611657565b9150915060008214801561098c5750600081145b156109a05788888095508196505050610a67565b60006109ad8a8484610ce9565b90508881116109ff57868110156109f0576040517fd036864900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89818096508197505050610a65565b6000610a0c8a8486610ce9565b90508a811115610a1f57610a1e611713565b5b88811015610a59576040517fd036864900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808a8097508198505050505b505b505050965096945050505050565b60005b60018451610a8691906115a6565b811015610bf857600080858381518110610aa357610aa261151b565b5b602002602001015186600185610ab99190611697565b81518110610aca57610ac961151b565b5b6020026020010151915091506000610ae28383610d9c565b509050600088600186610af59190611697565b81518110610b0657610b0561151b565b5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610b4e57600083610b52565b8260005b915091508873ffffffffffffffffffffffffffffffffffffffff16636d9a640a848d8a81518110610b8657610b8561151b565b5b60200260200101518b6040518463ffffffff1660e01b8152600401610bad93929190611742565b600060405180830381600087803b158015610bc757600080fd5b505af1158015610bdb573d6000803e3d6000fd5b505050505050505050508080610bf0906116cb565b915050610a78565b5050505050565b6000808411610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a906117eb565b60405180910390fd5b600083118015610c535750600082115b610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c899061187d565b60405180910390fd5b60006103e585610ca2919061189d565b905060008382610cb2919061189d565b90506000826103e887610cc5919061189d565b610ccf9190611697565b90508082610cdd919061190e565b93505050509392505050565b6000808411610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d24906119b1565b60405180910390fd5b600083118015610d3d5750600082115b610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d739061187d565b60405180910390fd5b828285610d89919061189d565b610d93919061190e565b90509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e04576040517f4bea99d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610e3e578284610e41565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eaf576040517f74b959e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ef582610eca565b9050919050565b610f0581610eea565b8114610f1057600080fd5b50565b600081359050610f2281610efc565b92915050565b6000819050919050565b610f3b81610f28565b8114610f4657600080fd5b50565b600081359050610f5881610f32565b92915050565b60008060008060008060c08789031215610f7b57610f7a610ec0565b5b6000610f8989828a01610f13565b9650506020610f9a89828a01610f13565b9550506040610fab89828a01610f49565b9450506060610fbc89828a01610f49565b9350506080610fcd89828a01610f49565b92505060a0610fde89828a01610f49565b9150509295509295509295565b610ff481610f28565b82525050565b600060608201905061100f6000830186610feb565b61101c6020830185610feb565b6110296040830184610feb565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f84011261105657611055611031565b5b8235905067ffffffffffffffff81111561107357611072611036565b5b60208301915083602082028301111561108f5761108e61103b565b5b9250929050565b600080600080606085870312156110b0576110af610ec0565b5b60006110be87828801610f49565b94505060206110cf87828801610f49565b935050604085013567ffffffffffffffff8111156110f0576110ef610ec5565b5b6110fc87828801611040565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61113f81610f28565b82525050565b60006111518383611136565b60208301905092915050565b6000602082019050919050565b60006111758261110a565b61117f8185611115565b935061118a83611126565b8060005b838110156111bb5781516111a28882611145565b97506111ad8361115d565b92505060018101905061118e565b5085935050505092915050565b600060208201905081810360008301526111e2818461116a565b905092915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611233826111ea565b810181811067ffffffffffffffff82111715611252576112516111fb565b5b80604052505050565b6000611265610eb6565b9050611271828261122a565b919050565b600067ffffffffffffffff821115611291576112906111fb565b5b602082029050602081019050919050565b60006112b56112b084611276565b61125b565b905080838252602082019050602084028301858111156112d8576112d761103b565b5b835b8181101561130157806112ed8882610f13565b8452602084019350506020810190506112da565b5050509392505050565b600082601f8301126113205761131f611031565b5b81356113308482602086016112a2565b91505092915050565b60008060006060848603121561135257611351610ec0565b5b600061136086828701610f13565b935050602061137186828701610f49565b925050604084013567ffffffffffffffff81111561139257611391610ec5565b5b61139e8682870161130b565b9150509250925092565b6113b181610eea565b82525050565b60006040820190506113cc60008301856113a8565b6113d960208301846113a8565b9392505050565b6000815190506113ef81610efc565b92915050565b60006020828403121561140b5761140a610ec0565b5b6000611419848285016113e0565b91505092915050565b600060608201905061143760008301866113a8565b61144460208301856113a8565b6114516040830184610feb565b949350505050565b60008115159050919050565b61146e81611459565b811461147957600080fd5b50565b60008151905061148b81611465565b92915050565b6000602082840312156114a7576114a6610ec0565b5b60006114b58482850161147c565b91505092915050565b60006020820190506114d360008301846113a8565b92915050565b6000815190506114e881610f32565b92915050565b60006020828403121561150457611503610ec0565b5b6000611512848285016114d9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156115605761155f610ec0565b5b600061156e84828501610f13565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115b182610f28565b91506115bc83610f28565b92508282039050818111156115d4576115d3611577565b5b92915050565b600082825260208201905092915050565b7f556e697377617056324c6962726172793a20494e56414c49445f504154480000600082015250565b6000611621601e836115da565b915061162c826115eb565b602082019050919050565b6000602082019050818103600083015261165081611614565b9050919050565b6000806040838503121561166e5761166d610ec0565b5b600061167c858286016114d9565b925050602061168d858286016114d9565b9150509250929050565b60006116a282610f28565b91506116ad83610f28565b92508282019050808211156116c5576116c4611577565b5b92915050565b60006116d682610f28565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361170857611707611577565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006060820190506117576000830186610feb565b6117646020830185610feb565b61177160408301846113a8565b949350505050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000602082015250565b60006117d5602b836115da565b91506117e082611779565b604082019050919050565b60006020820190508181036000830152611804816117c8565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008201527f4951554944495459000000000000000000000000000000000000000000000000602082015250565b60006118676028836115da565b91506118728261180b565b604082019050919050565b600060208201905081810360008301526118968161185a565b9050919050565b60006118a882610f28565b91506118b383610f28565b92508282026118c181610f28565b915082820484148315176118d8576118d7611577565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061191982610f28565b915061192483610f28565b925082611934576119336118df565b5b828204905092915050565b7f556e69737761705632446566694c6962726172793a20494e535546464943494560008201527f4e545f414d4f554e540000000000000000000000000000000000000000000000602082015250565b600061199b6029836115da565b91506119a68261193f565b604082019050919050565b600060208201905081810360008301526119ca8161198e565b905091905056fea26469706673582212204430e9b710e202668bc5a568f46172f8da741088f2743920410eb579165178e464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633351733f1461004657806386818f2614610078578063bb7b9c76146100a8575b600080fd5b610060600480360381019061005b9190610f5e565b6100d8565b60405161006f93929190610ffa565b60405180910390f35b610092600480360381019061008d9190611096565b610322565b60405161009f91906111c8565b60405180910390f35b6100c260048036038101906100bd9190611339565b6105df565b6040516100cf91906111c8565b60405180910390f35b60008060006100eb89898989898961078d565b809350819450505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a70f02e8b8b6040518363ffffffff1660e01b81526004016101509291906113b7565b6020604051808303816000875af115801561016f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019391906113f5565b90508973ffffffffffffffffffffffffffffffffffffffff166323b872dd3383876040518463ffffffff1660e01b81526004016101d293929190611422565b6020604051808303816000875af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190611491565b508873ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b815260040161025393929190611422565b6020604051808303816000875af1158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190611491565b508073ffffffffffffffffffffffffffffffffffffffff16636a627842336040518263ffffffff1660e01b81526004016102d091906114be565b6020604051808303816000875af11580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906114ee565b91505096509650969350505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a70f02e858560008181106103765761037561151b565b5b905060200201602081019061038b919061154a565b8686600181811061039f5761039e61151b565b5b90506020020160208101906103b4919061154a565b6040518363ffffffff1660e01b81526004016103d19291906113b7565b6020604051808303816000875af11580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041491906113f5565b90506104628187868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506105df565b915084826001845161047491906115a6565b815181106104855761048461151b565b5b602002602001015110156104c5576040517fdec0fbbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360008181106104d9576104d861151b565b5b90506020020160208101906104ee919061154a565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33838560008151811061051f5761051e61151b565b5b60200260200101516040518463ffffffff1660e01b815260040161054593929190611422565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190611491565b506105d682858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508333610a75565b50949350505050565b6060600282511015610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90611637565b60405180910390fd5b815167ffffffffffffffff811115610641576106406111fb565b5b60405190808252806020026020018201604052801561066f5781602001602082028036833780820191505090505b50905082816000815181106106875761068661151b565b5b60200260200101818152505060005b600183516106a491906115a6565b811015610785576000808673ffffffffffffffffffffffffffffffffffffffff1663b9cf50056040518163ffffffff1660e01b81526004016040805180830381865afa1580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c9190611657565b915091506107458484815181106107365761073561151b565b5b60200260200101518383610bff565b846001856107539190611697565b815181106107645761076361151b565b5b6020026020010181815250505050808061077d906116cb565b915050610696565b509392505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a70f02e8a8a6040518363ffffffff1660e01b81526004016107ed9291906113b7565b6020604051808303816000875af115801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906113f5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610907577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e34336158a8a6040518363ffffffff1660e01b81526004016108c19291906113b7565b6020604051808303816000875af11580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090491906113f5565b90505b6000808273ffffffffffffffffffffffffffffffffffffffff1663b9cf50056040518163ffffffff1660e01b81526004016040805180830381865afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190611657565b9150915060008214801561098c5750600081145b156109a05788888095508196505050610a67565b60006109ad8a8484610ce9565b90508881116109ff57868110156109f0576040517fd036864900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89818096508197505050610a65565b6000610a0c8a8486610ce9565b90508a811115610a1f57610a1e611713565b5b88811015610a59576040517fd036864900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808a8097508198505050505b505b505050965096945050505050565b60005b60018451610a8691906115a6565b811015610bf857600080858381518110610aa357610aa261151b565b5b602002602001015186600185610ab99190611697565b81518110610aca57610ac961151b565b5b6020026020010151915091506000610ae28383610d9c565b509050600088600186610af59190611697565b81518110610b0657610b0561151b565b5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610b4e57600083610b52565b8260005b915091508873ffffffffffffffffffffffffffffffffffffffff16636d9a640a848d8a81518110610b8657610b8561151b565b5b60200260200101518b6040518463ffffffff1660e01b8152600401610bad93929190611742565b600060405180830381600087803b158015610bc757600080fd5b505af1158015610bdb573d6000803e3d6000fd5b505050505050505050508080610bf0906116cb565b915050610a78565b5050505050565b6000808411610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a906117eb565b60405180910390fd5b600083118015610c535750600082115b610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c899061187d565b60405180910390fd5b60006103e585610ca2919061189d565b905060008382610cb2919061189d565b90506000826103e887610cc5919061189d565b610ccf9190611697565b90508082610cdd919061190e565b93505050509392505050565b6000808411610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d24906119b1565b60405180910390fd5b600083118015610d3d5750600082115b610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d739061187d565b60405180910390fd5b828285610d89919061189d565b610d93919061190e565b90509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e04576040517f4bea99d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610e3e578284610e41565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eaf576040517f74b959e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ef582610eca565b9050919050565b610f0581610eea565b8114610f1057600080fd5b50565b600081359050610f2281610efc565b92915050565b6000819050919050565b610f3b81610f28565b8114610f4657600080fd5b50565b600081359050610f5881610f32565b92915050565b60008060008060008060c08789031215610f7b57610f7a610ec0565b5b6000610f8989828a01610f13565b9650506020610f9a89828a01610f13565b9550506040610fab89828a01610f49565b9450506060610fbc89828a01610f49565b9350506080610fcd89828a01610f49565b92505060a0610fde89828a01610f49565b9150509295509295509295565b610ff481610f28565b82525050565b600060608201905061100f6000830186610feb565b61101c6020830185610feb565b6110296040830184610feb565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f84011261105657611055611031565b5b8235905067ffffffffffffffff81111561107357611072611036565b5b60208301915083602082028301111561108f5761108e61103b565b5b9250929050565b600080600080606085870312156110b0576110af610ec0565b5b60006110be87828801610f49565b94505060206110cf87828801610f49565b935050604085013567ffffffffffffffff8111156110f0576110ef610ec5565b5b6110fc87828801611040565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61113f81610f28565b82525050565b60006111518383611136565b60208301905092915050565b6000602082019050919050565b60006111758261110a565b61117f8185611115565b935061118a83611126565b8060005b838110156111bb5781516111a28882611145565b97506111ad8361115d565b92505060018101905061118e565b5085935050505092915050565b600060208201905081810360008301526111e2818461116a565b905092915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611233826111ea565b810181811067ffffffffffffffff82111715611252576112516111fb565b5b80604052505050565b6000611265610eb6565b9050611271828261122a565b919050565b600067ffffffffffffffff821115611291576112906111fb565b5b602082029050602081019050919050565b60006112b56112b084611276565b61125b565b905080838252602082019050602084028301858111156112d8576112d761103b565b5b835b8181101561130157806112ed8882610f13565b8452602084019350506020810190506112da565b5050509392505050565b600082601f8301126113205761131f611031565b5b81356113308482602086016112a2565b91505092915050565b60008060006060848603121561135257611351610ec0565b5b600061136086828701610f13565b935050602061137186828701610f49565b925050604084013567ffffffffffffffff81111561139257611391610ec5565b5b61139e8682870161130b565b9150509250925092565b6113b181610eea565b82525050565b60006040820190506113cc60008301856113a8565b6113d960208301846113a8565b9392505050565b6000815190506113ef81610efc565b92915050565b60006020828403121561140b5761140a610ec0565b5b6000611419848285016113e0565b91505092915050565b600060608201905061143760008301866113a8565b61144460208301856113a8565b6114516040830184610feb565b949350505050565b60008115159050919050565b61146e81611459565b811461147957600080fd5b50565b60008151905061148b81611465565b92915050565b6000602082840312156114a7576114a6610ec0565b5b60006114b58482850161147c565b91505092915050565b60006020820190506114d360008301846113a8565b92915050565b6000815190506114e881610f32565b92915050565b60006020828403121561150457611503610ec0565b5b6000611512848285016114d9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156115605761155f610ec0565b5b600061156e84828501610f13565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115b182610f28565b91506115bc83610f28565b92508282039050818111156115d4576115d3611577565b5b92915050565b600082825260208201905092915050565b7f556e697377617056324c6962726172793a20494e56414c49445f504154480000600082015250565b6000611621601e836115da565b915061162c826115eb565b602082019050919050565b6000602082019050818103600083015261165081611614565b9050919050565b6000806040838503121561166e5761166d610ec0565b5b600061167c858286016114d9565b925050602061168d858286016114d9565b9150509250929050565b60006116a282610f28565b91506116ad83610f28565b92508282019050808211156116c5576116c4611577565b5b92915050565b60006116d682610f28565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361170857611707611577565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006060820190506117576000830186610feb565b6117646020830185610feb565b61177160408301846113a8565b949350505050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000602082015250565b60006117d5602b836115da565b91506117e082611779565b604082019050919050565b60006020820190508181036000830152611804816117c8565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008201527f4951554944495459000000000000000000000000000000000000000000000000602082015250565b60006118676028836115da565b91506118728261180b565b604082019050919050565b600060208201905081810360008301526118968161185a565b9050919050565b60006118a882610f28565b91506118b383610f28565b92508282026118c181610f28565b915082820484148315176118d8576118d7611577565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061191982610f28565b915061192483610f28565b925082611934576119336118df565b5b828204905092915050565b7f556e69737761705632446566694c6962726172793a20494e535546464943494560008201527f4e545f414d4f554e540000000000000000000000000000000000000000000000602082015250565b600061199b6029836115da565b91506119a68261193f565b604082019050919050565b600060208201905081810360008301526119ca8161198e565b905091905056fea26469706673582212204430e9b710e202668bc5a568f46172f8da741088f2743920410eb579165178e464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}