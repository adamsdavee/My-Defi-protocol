{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/core/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IFactory {\r\n    function getTokenPairs(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address);\r\n\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address poolPair);\r\n}\r\n"
    },
    "contracts/core/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IPool {\r\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function init(address _tokenA, address _tokenB) external;\r\n\r\n    function mint(address _to) external returns (uint256);\r\n\r\n    function liquidateLpTokens(\r\n        address to\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getTokenReserves() external view returns (uint256, uint256);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to /**bytes calldata data */\r\n    ) external;\r\n}\r\n"
    },
    "contracts/core/interfaces/IWedu.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IWEDU {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function withdraw(uint) external;\r\n}\r\n"
    },
    "contracts/core/libraries/Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nerror PoolFactory__IdenticalAddress();\r\nerror PoolFactory__ZeroAddress();\r\n\r\nlibrary DefiLibrary {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address token0, address token1) {\r\n        if (tokenA == tokenB) revert PoolFactory__IdenticalAddress();\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        // since tokenA is the smaller address we can check if its == address(0);\r\n        if (token0 == address(0)) revert PoolFactory__ZeroAddress();\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint amountInWithFee = amountIn * 997;\r\n        uint numerator = amountInWithFee * reserveOut;\r\n        uint denominator = (reserveIn * 1000) + (amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n}\r\n"
    },
    "contracts/core/LiquidityProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IFactory.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/IWedu.sol\";\r\nimport \"./libraries/Library.sol\";\r\n\r\nerror LiquidityProvider__InsufficientAmount();\r\nerror LiquidityProvider__InsufficientOutputAmount();\r\nerror LiquidityProvider__EDUTransferFailed();\r\n\r\ncontract LiquidityProvider {\r\n    address private immutable factoryAddress;\r\n    address private immutable WEDU;\r\n\r\n    constructor(address _factoryAddress, address _WEDU) {\r\n        factoryAddress = _factoryAddress;\r\n        WEDU = _WEDU;\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 amountOfTokenADesired,\r\n        uint256 amountOfTokenBDesired,\r\n        uint256 minTokenA,\r\n        uint256 minTokenB\r\n    ) internal returns (uint256 amountA, uint256 amountB) {\r\n        address pair = IFactory(factoryAddress).getTokenPairs(_tokenA, _tokenB);\r\n        if (pair == address(0))\r\n            pair = IFactory(factoryAddress).createPool(_tokenA, _tokenB);\r\n\r\n        (uint256 reserveA, uint256 reserveB) = IPool(pair).getTokenReserves();\r\n\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountOfTokenADesired, amountOfTokenBDesired);\r\n        } else {\r\n            uint256 optimalAmountOfTokenB = quote(\r\n                amountOfTokenADesired,\r\n                reserveA,\r\n                reserveB\r\n            );\r\n            if (optimalAmountOfTokenB <= amountOfTokenBDesired) {\r\n                if (optimalAmountOfTokenB < minTokenB)\r\n                    revert LiquidityProvider__InsufficientAmount();\r\n                (amountA, amountB) = (\r\n                    amountOfTokenADesired,\r\n                    optimalAmountOfTokenB\r\n                );\r\n            } else {\r\n                uint256 amountAOptimal = quote(\r\n                    amountOfTokenBDesired,\r\n                    reserveB,\r\n                    reserveA\r\n                );\r\n                assert(amountAOptimal <= amountOfTokenADesired);\r\n                if (amountAOptimal < minTokenA)\r\n                    revert LiquidityProvider__InsufficientAmount();\r\n                (amountA, amountB) = (amountAOptimal, amountOfTokenBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountOfTokenADesired,\r\n        uint256 amountOfTokenBDesired,\r\n        uint256 minTokenA,\r\n        uint256 minTokenB\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\r\n        (amountA, amountB) = _addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountOfTokenADesired,\r\n            amountOfTokenBDesired,\r\n            minTokenA,\r\n            minTokenB\r\n        );\r\n        address pair = IFactory(factoryAddress).getTokenPairs(tokenA, tokenB);\r\n        IERC20(tokenA).transferFrom(msg.sender, pair, amountA);\r\n        IERC20(tokenB).transferFrom(msg.sender, pair, amountB);\r\n        liquidity = IPool(pair).mint(msg.sender);\r\n    }\r\n\r\n    // function addLiquidityEdu(\r\n    //     address tokenA\r\n    // ) external returns (uint256 amountA, uint256 amountEDU, uint256 liquidity) {\r\n    //    (amountA, amountEDU) = _addLiquidity();\r\n    //     address pair = IFactory(factoryAddress).getTokenPairs(tokenA, WEDU);\r\n    //     IERC20(tokenA).transferFrom(msg.sender, pair, amountA);\r\n    //     IWEDU(WEDU).deposit{value: amountEDU}();\r\n    //     assert(IWEDU(WEDU).transfer(pair, amountEDU));\r\n    //     liquidity = IPool(pair).mint(msg.sender);\r\n\r\n    //     if (msg.value > amountEDU)\r\n    //         (bool success, ) = msg.sender.call{value: value}(\"\");\r\n    //     if (!success) revert LiquidityProvider__EDUTransferFailed();\r\n    // }\r\n\r\n    // TODO: Remove liquidity & liquidityEdu\r\n\r\n    // Swapppp\r\n\r\n    function _swap(\r\n        uint256[] memory amounts,\r\n        address[] memory path,\r\n        address _pair,\r\n        address _to\r\n    ) internal {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = DefiLibrary.sortTokens(input, output);\r\n            uint256 amountOut = amounts[i + 1];\r\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\r\n                ? (amountOut, uint256(0))\r\n                : (uint256(0), amountOut);\r\n            /**TODO: In case of multiple hops */\r\n            IPool(_pair).swap(amountOut, amounts[i], _to);\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        returns (\r\n            /**address to*/\r\n            uint[] memory amounts\r\n        )\r\n    {\r\n        address pair = IFactory(factoryAddress).getTokenPairs(path[0], path[1]);\r\n\r\n        amounts = getAmountsOut(pair, amountIn, path);\r\n        if (amounts[amounts.length - 1] < amountOutMin)\r\n            revert LiquidityProvider__InsufficientOutputAmount();\r\n\r\n        IERC20(path[0]).transferFrom(msg.sender, pair, amounts[0]);\r\n        _swap(amounts, path, pair, msg.sender);\r\n    }\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) internal pure returns (uint amountB) {\r\n        require(amountA > 0, \"UniswapV2DefiLibrary: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = (amountA * reserveB) / reserveA;\r\n    }\r\n\r\n    // function getAmountsOut() public view returns (uint256) {}\r\n\r\n    function getAmountsOut(\r\n        address pair,\r\n        uint amountIn,\r\n        address[] memory path\r\n    ) public view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = IPool(pair).getTokenReserves();\r\n            amounts[i + 1] = DefiLibrary.getAmountOut(\r\n                amounts[i],\r\n                reserveIn,\r\n                reserveOut\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}