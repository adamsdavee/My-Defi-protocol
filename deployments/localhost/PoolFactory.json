{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiverSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PoolFactory__IdenticalAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFactory__NotSetter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFactory__PoolExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFactory__ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiverSetter",
          "type": "address"
        }
      ],
      "name": "addToFeeReceiverSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getTokenPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiverSetter",
          "type": "address"
        }
      ],
      "name": "removeFromFeeReceiverSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31b784e1ce1bc6ff598beeaae07995e47d1549ed72946186cc2b44d5bda1ca64",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2627784",
    "logsBloom": "0x
    "blockHash": "0x42d5559932cb4e5a0e6774fe623b33d68ce07c2e35f9f3a8050a1a9407d1467d",
    "transactionHash": "0x31b784e1ce1bc6ff598beeaae07995e47d1549ed72946186cc2b44d5bda1ca64",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2627784",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff3fc59114d2ed592cdcd5ede45a1285",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiverSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PoolFactory__IdenticalAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFactory__NotSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFactory__PoolExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFactory__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiverSetter\",\"type\":\"address\"}],\"name\":\"addToFeeReceiverSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getTokenPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiverSetter\",\"type\":\"address\"}],\"name\":\"removeFromFeeReceiverSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Factory.sol\":\"PoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/core/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\n\\r\\nerror PoolFactory__IdenticalAddress();\\r\\nerror PoolFactory__ZeroAddress();\\r\\nerror PoolFactory__PoolExists();\\r\\nerror PoolFactory__NotSetter();\\r\\n\\r\\ncontract PoolFactory {\\r\\n    address private feeReceiver;\\r\\n    mapping(address => bool) private feeReceiverSetter;\\r\\n\\r\\n    mapping(address => mapping(address => address)) private getPairs;\\r\\n    address[] private allPairs;\\r\\n\\r\\n    event PoolCreated(address tokenA, address tokenB, address poolAddress);\\r\\n\\r\\n    constructor(address _feeReceiverSetter) {\\r\\n        feeReceiverSetter[_feeReceiverSetter] = true;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address poolAddress) {\\r\\n        if (tokenA == tokenB) revert PoolFactory__IdenticalAddress();\\r\\n        (address token0, address token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        // since tokenA is the smaller address we can check if its == address(0);\\r\\n        if (token0 == address(0)) revert PoolFactory__ZeroAddress();\\r\\n        if (getPairs[token0][token1] != address(0))\\r\\n            revert PoolFactory__PoolExists();\\r\\n\\r\\n        bytes memory bytecode = type(Pool).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\\r\\n\\r\\n        //TODO: put the salt\\r\\n\\r\\n        assembly {\\r\\n            poolAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n\\r\\n        Pool(poolAddress).init(tokenA, tokenB);\\r\\n\\r\\n        getPairs[token0][token1] = poolAddress;\\r\\n        getPairs[token1][token0] = poolAddress;\\r\\n        allPairs.push(poolAddress);\\r\\n\\r\\n        emit PoolCreated(token0, token1, poolAddress);\\r\\n    }\\r\\n\\r\\n    function getTokenPairs(\\r\\n        address _tokenA,\\r\\n        address _tokenB\\r\\n    ) external view returns (address) {\\r\\n        return getPairs[_tokenA][_tokenB];\\r\\n    }\\r\\n\\r\\n    function setFeeReceiver(address _feeReceiver) external {\\r\\n        checkIfSetter();\\r\\n\\r\\n        feeReceiver = _feeReceiver;\\r\\n    }\\r\\n\\r\\n    function addToFeeReceiverSetter(address _feeReceiverSetter) external {\\r\\n        checkIfSetter();\\r\\n\\r\\n        feeReceiverSetter[_feeReceiverSetter] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromFeeReceiverSetter(address _feeReceiverSetter) external {\\r\\n        checkIfSetter();\\r\\n\\r\\n        feeReceiverSetter[_feeReceiverSetter] = false;\\r\\n    }\\r\\n\\r\\n    function checkIfSetter() internal view {\\r\\n        bool ifSetter = feeReceiverSetter[msg.sender];\\r\\n        if (!ifSetter) revert PoolFactory__NotSetter();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4608c41c2de98cd7cf52c668d07efd768fac73a6ec173b72503bb3620347bfb1\",\"license\":\"MIT\"},\"contracts/core/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a4911fa1c76c96a2e3d1b9c8fa04e6742a3e65f3bbda7e81d5fdf625ca25b1f\",\"license\":\"MIT\"},\"contracts/core/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Math.sol\\\";\\r\\n\\r\\nerror PoolFactory__NotOwner();\\r\\nerror PoolFactory__InsufficientLiquidity();\\r\\nerror PoolFactory__InsufficientFunds();\\r\\n\\r\\ncontract Pool is ERC20 {\\r\\n    using Math for uint256;\\r\\n\\r\\n    address private immutable factory;\\r\\n    address private tokenA;\\r\\n    address private tokenB;\\r\\n\\r\\n    uint256 public constant MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n\\r\\n    uint256 private reserveA;\\r\\n    uint256 private reserveB;\\r\\n\\r\\n    uint256 private totalLpShares;\\r\\n\\r\\n    constructor() ERC20(\\\"LiquidityTokens\\\", \\\"LP\\\") {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    function init(address _tokenA, address _tokenB) external {\\r\\n        if (factory != msg.sender) revert PoolFactory__NotOwner();\\r\\n\\r\\n        tokenA = _tokenA;\\r\\n        tokenB = _tokenB;\\r\\n    }\\r\\n\\r\\n    function _update(uint256 _balanceA, uint256 _balanceB) private {\\r\\n        reserveA = _balanceA;\\r\\n        reserveB = _balanceB;\\r\\n    }\\r\\n\\r\\n    function mint(address _to) external returns (uint256 liquidity) {\\r\\n        (uint256 _reserveA, uint256 _reserveB) = getTokenReserves();\\r\\n        uint256 _balanceA = ERC20(tokenA).balanceOf(address(this));\\r\\n        uint256 _balanceB = ERC20(tokenB).balanceOf(address(this));\\r\\n        uint256 depositOfTokenA = _balanceA - _reserveA;\\r\\n        uint256 depositOfTokenB = _balanceB - _reserveB;\\r\\n\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity =\\r\\n                Math.sqrt(depositOfTokenA * depositOfTokenB) -\\r\\n                (MINIMUM_LIQUIDITY);\\r\\n            _mint(address(1), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens to avoid the pool being drained\\r\\n        } else {\\r\\n            liquidity = Math.min(\\r\\n                (depositOfTokenA * _totalSupply) / _reserveA,\\r\\n                (depositOfTokenB * _totalSupply) / _reserveB\\r\\n            );\\r\\n        }\\r\\n        if (liquidity <= 0) revert PoolFactory__InsufficientLiquidity();\\r\\n        _mint(_to, liquidity);\\r\\n        _update(_balanceA, _balanceB);\\r\\n\\r\\n        // emit Mint(msg.sender, depositOfTokenA, depositOfTokenB);\\r\\n    }\\r\\n\\r\\n    // BURN\\r\\n    function liquidateLpTokens(\\r\\n        address to\\r\\n    ) external returns (uint256 amountA, uint256 amountB) {\\r\\n        (uint256 _reserve0, uint256 _reserve1) = getTokenReserves(); // gas savings\\r\\n        address _tokenA = tokenA; // gas savings\\r\\n        address _tokenB = tokenB; // gas savings\\r\\n        uint balanceA = IERC20(_tokenA).balanceOf(address(this));\\r\\n        uint balanceB = IERC20(_tokenB).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf(to);\\r\\n\\r\\n        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amountA = (liquidity * balanceA) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amountB = (liquidity * balanceB) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        if (amountA <= 0 && amountB <= 0)\\r\\n            revert PoolFactory__InsufficientLiquidity();\\r\\n        _burn(address(this), liquidity);\\r\\n        IERC20(_tokenA).transfer(to, amountA);\\r\\n        IERC20(_tokenB).transfer(to, amountB);\\r\\n        balanceA = IERC20(_tokenA).balanceOf(address(this));\\r\\n        balanceB = IERC20(_tokenB).balanceOf(address(this));\\r\\n\\r\\n        _update(balanceA, balanceB);\\r\\n\\r\\n        // emit Burn(msg.sender, amount0, amountB, to);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to /**bytes calldata data */\\r\\n    ) external {\\r\\n        if (amount0Out <= 0 && amount1Out <= 0)\\r\\n            revert PoolFactory__InsufficientFunds();\\r\\n        (uint256 _reserve0, uint256 _reserve1) = getTokenReserves();\\r\\n        if (amount0Out > _reserve0 || amount1Out > _reserve1)\\r\\n            revert PoolFactory__InsufficientLiquidity();\\r\\n        uint256 balanceA;\\r\\n        uint256 balanceB;\\r\\n        {\\r\\n            address _tokenA = tokenA;\\r\\n            address _tokenB = tokenB;\\r\\n            if (amount0Out > 0) IERC20(_tokenA).transfer(to, amount0Out);\\r\\n            if (amount1Out > 0) IERC20(_tokenB).transfer(to, amount1Out);\\r\\n            balanceA = IERC20(_tokenA).balanceOf(address(this));\\r\\n            balanceB = IERC20(_tokenB).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        _update(balanceA, balanceB);\\r\\n    }\\r\\n\\r\\n    function getTokenReserves() public view returns (uint256, uint256) {\\r\\n        return (reserveA, reserveB);\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external {\\r\\n        _update(\\r\\n            IERC20(tokenA).balanceOf(address(this)),\\r\\n            IERC20(tokenB).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe27f7e1c6b11be65d849e7eb92cadf77205f10aae324e96b9fd79b03ae31f2df\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IPool {\\r\\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function init(address _tokenA, address _tokenB) external;\\r\\n\\r\\n    function mint(address _to) external returns (uint256);\\r\\n\\r\\n    function liquidateLpTokens(\\r\\n        address to\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function getTokenReserves() external view returns (uint256, uint256);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to /**bytes calldata data */\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x121ade41eccbda0c4e3acfe5553109c7fdb9bcd8222fe59651dd4c7ed133cd8e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612f73380380612f73833981810160405281019061003291906100f2565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505061011f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100bf82610094565b9050919050565b6100cf816100b4565b81146100da57600080fd5b50565b6000815190506100ec816100c6565b92915050565b6000602082840312156101085761010761008f565b5b6000610116848285016100dd565b91505092915050565b612e458061012e6000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80634839702314620000635780634a70f02e14620000835780635ac40ab314620000b9578063e343361514620000d9578063efdcd974146200010f575b600080fd5b6200008160048036038101906200007b9190620008fe565b6200012f565b005b620000a160048036038101906200009b919062000930565b62000194565b604051620000b0919062000988565b60405180910390f35b620000d76004803603810190620000d19190620008fe565b6200023b565b005b620000f76004803603810190620000f1919062000930565b6200029f565b60405162000106919062000988565b60405180910390f35b6200012d6004803603810190620001279190620008fe565b620007ad565b005b62000139620007fa565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b62000245620007fa565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000307576040517f4bea99d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106200034657838562000349565b84845b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003b4576040517f74b959e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620004b7576040517f423d793500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180602001620004cb9062000886565b6020820181038252601f19601f82011660405250905060008686604051602001620004f8929190620009f5565b604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663f09a401688886040518363ffffffff1660e01b81526004016200055992919062000a25565b600060405180830381600087803b1580156200057457600080fd5b505af115801562000589573d6000803e3d6000fd5b5050505084600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b8484876040516200079b9392919062000a52565b60405180910390a15050505092915050565b620007b7620007fa565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690508062000883576040517fe9e1731800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6123808062000a9083390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008c68262000899565b9050919050565b620008d881620008b9565b8114620008e457600080fd5b50565b600081359050620008f881620008cd565b92915050565b60006020828403121562000917576200091662000894565b5b60006200092784828501620008e7565b91505092915050565b600080604083850312156200094a576200094962000894565b5b60006200095a85828601620008e7565b92505060206200096d85828601620008e7565b9150509250929050565b6200098281620008b9565b82525050565b60006020820190506200099f600083018462000977565b92915050565b60008160601b9050919050565b6000620009bf82620009a5565b9050919050565b6000620009d382620009b2565b9050919050565b620009ef620009e982620008b9565b620009c6565b82525050565b600062000a038285620009da565b60148201915062000a158284620009da565b6014820191508190509392505050565b600060408201905062000a3c600083018562000977565b62000a4b602083018462000977565b9392505050565b600060608201905062000a69600083018662000977565b62000a78602083018562000977565b62000a87604083018462000977565b94935050505056fe60a06040523480156200001157600080fd5b506040518060400160405280600f81526020017f4c6971756964697479546f6b656e7300000000000000000000000000000000008152506040518060400160405280600281526020017f4c5000000000000000000000000000000000000000000000000000000000000081525081600390816200008f919062000358565b508060049081620000a1919062000358565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506200043f565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200016057607f821691505b60208210810362000176576200017562000118565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001a1565b620001ec8683620001a1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000239620002336200022d8462000204565b6200020e565b62000204565b9050919050565b6000819050919050565b620002558362000218565b6200026d620002648262000240565b848454620001ae565b825550505050565b600090565b6200028462000275565b620002918184846200024a565b505050565b5b81811015620002b957620002ad6000826200027a565b60018101905062000297565b5050565b601f8211156200030857620002d2816200017c565b620002dd8462000191565b81016020851015620002ed578190505b62000305620002fc8562000191565b83018262000296565b50505b505050565b600082821c905092915050565b60006200032d600019846008026200030d565b1980831691505092915050565b60006200034883836200031a565b9150826002028217905092915050565b6200036382620000de565b67ffffffffffffffff8111156200037f576200037e620000e9565b5b6200038b825462000147565b62000398828285620002bd565b600060209050601f831160018114620003d05760008415620003bb578287015190505b620003c785826200033a565b86555062000437565b601f198416620003e0866200017c565b60005b828110156200040a57848901518255600182019150602085019450602081019050620003e3565b868310156200042a578489015162000426601f8916826200031a565b8355505b6001600288020188555050505b505050505050565b608051611f256200045b6000396000610f580152611f256000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806374a0f94b11610097578063ba9a7a5611610066578063ba9a7a56146102d9578063dd62ed3e146102f7578063f09a401614610327578063fff6cae91461034357610100565b806374a0f94b1461023b57806395d89b411461026c578063a9059cbb1461028a578063b9cf5005146102ba57610100565b8063313ce567116100d3578063313ce567146101a15780636a627842146101bf5780636d9a640a146101ef57806370a082311461020b57610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d61034d565b60405161011a9190611963565b60405180910390f35b61013d60048036038101906101389190611a1e565b6103df565b60405161014a9190611a79565b60405180910390f35b61015b610402565b6040516101689190611aa3565b60405180910390f35b61018b60048036038101906101869190611abe565b61040c565b6040516101989190611a79565b60405180910390f35b6101a961043b565b6040516101b69190611b2d565b60405180910390f35b6101d960048036038101906101d49190611b48565b610444565b6040516101e69190611aa3565b60405180910390f35b61020960048036038101906102049190611b75565b610691565b005b61022560048036038101906102209190611b48565b61099d565b6040516102329190611aa3565b60405180910390f35b61025560048036038101906102509190611b48565b6109e5565b604051610263929190611bc8565b60405180910390f35b610274610dec565b6040516102819190611963565b60405180910390f35b6102a4600480360381019061029f9190611a1e565b610e7e565b6040516102b19190611a79565b60405180910390f35b6102c2610ea1565b6040516102d0929190611bc8565b60405180910390f35b6102e1610eb2565b6040516102ee9190611aa3565b60405180910390f35b610311600480360381019061030c9190611bf1565b610eb8565b60405161031e9190611aa3565b60405180910390f35b610341600480360381019061033c9190611bf1565b610f3f565b005b61034b61104a565b005b60606003805461035c90611c60565b80601f016020809104026020016040519081016040528092919081815260200182805461038890611c60565b80156103d55780601f106103aa576101008083540402835291602001916103d5565b820191906000526020600020905b8154815290600101906020018083116103b857829003601f168201915b5050505050905090565b6000806103ea61118c565b90506103f7818585611194565b600191505092915050565b6000600254905090565b60008061041761118c565b90506104248582856111a6565b61042f85858561123a565b60019150509392505050565b60006012905090565b6000806000610451610ea1565b915091506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104b29190611ca0565b602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611cd0565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105529190611ca0565b602060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611cd0565b9050600084836105a39190611d2c565b9050600084836105b39190611d2c565b905060006105bf610402565b9050600081036105fe576103e86105e083856105db9190611d60565b61132e565b6105ea9190611d2c565b97506105f960016103e86113a8565b610637565b61063487828561060e9190611d60565b6106189190611dd1565b8783856106259190611d60565b61062f9190611dd1565b61142a565b97505b60008811610671576040517f24217e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61067b89896113a8565b6106858585611443565b50505050505050919050565b600083111580156106a3575060008211155b156106da576040517f5d125c4600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806106e5610ea1565b91509150818511806106f657508084115b1561072d576040517f24217e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000891115610807578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb888b6040518363ffffffff1660e01b81526004016107c2929190611e02565b6020604051808303816000875af11580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190611e57565b505b6000881115610890578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb888a6040518363ffffffff1660e01b815260040161084b929190611e02565b6020604051808303816000875af115801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190611e57565b505b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108c99190611ca0565b602060405180830381865afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190611cd0565b93508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109459190611ca0565b602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190611cd0565b925050506109948282611443565b50505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000806109f3610ea1565b915091506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a809190611ca0565b602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611cd0565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610afe9190611ca0565b602060405180830381865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190611cd0565b90506000610b4c8a61099d565b90506000610b58610402565b9050808483610b679190611d60565b610b719190611dd1565b9950808383610b809190611d60565b610b8a9190611dd1565b985060008a11158015610b9e575060008911155b15610bd5576040517f24217e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bdf3083611455565b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c8c6040518363ffffffff1660e01b8152600401610c1a929190611e02565b6020604051808303816000875af1158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190611e57565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c8b6040518363ffffffff1660e01b8152600401610c99929190611e02565b6020604051808303816000875af1158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc9190611e57565b508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d169190611ca0565b602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190611cd0565b93508473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d929190611ca0565b602060405180830381865afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190611cd0565b9250610ddf8484611443565b5050505050505050915091565b606060048054610dfb90611c60565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2790611c60565b8015610e745780601f10610e4957610100808354040283529160200191610e74565b820191906000526020600020905b815481529060010190602001808311610e5757829003601f168201915b5050505050905090565b600080610e8961118c565b9050610e9681858561123a565b600191505092915050565b600080600754600854915091509091565b6103e881565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610fc4576040517f0c18a1fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61118a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110a89190611ca0565b602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190611cd0565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111449190611ca0565b602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190611cd0565b611443565b565b600033905090565b6111a183838360016114d7565b505050565b60006111b28484610eb8565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112345781811015611224578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161121b93929190611e84565b60405180910390fd5b611233848484840360006114d7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112ac5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016112a39190611ca0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361131e5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016113159190611ca0565b60405180910390fd5b6113298383836116ae565b505050565b60006003821115611395578190506000600160028461134d9190611dd1565b6113579190611ebb565b90505b8181101561138f5780915060028182856113749190611dd1565b61137e9190611ebb565b6113889190611dd1565b905061135a565b506113a3565b600082146113a257600190505b5b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361141a5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016114119190611ca0565b60405180910390fd5b611426600083836116ae565b5050565b6000818310611439578161143b565b825b905092915050565b81600781905550806008819055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114c75760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016114be9190611ca0565b60405180910390fd5b6114d3826000836116ae565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115495760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016115409190611ca0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115bb5760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016115b29190611ca0565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156116a8578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161169f9190611aa3565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117005780600260008282546116f49190611ebb565b925050819055506117d3565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561178c578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161178393929190611e84565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361181c5780600260008282540392505081905550611869565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118c69190611aa3565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561190d5780820151818401526020810190506118f2565b60008484015250505050565b6000601f19601f8301169050919050565b6000611935826118d3565b61193f81856118de565b935061194f8185602086016118ef565b61195881611919565b840191505092915050565b6000602082019050818103600083015261197d818461192a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119b58261198a565b9050919050565b6119c5816119aa565b81146119d057600080fd5b50565b6000813590506119e2816119bc565b92915050565b6000819050919050565b6119fb816119e8565b8114611a0657600080fd5b50565b600081359050611a18816119f2565b92915050565b60008060408385031215611a3557611a34611985565b5b6000611a43858286016119d3565b9250506020611a5485828601611a09565b9150509250929050565b60008115159050919050565b611a7381611a5e565b82525050565b6000602082019050611a8e6000830184611a6a565b92915050565b611a9d816119e8565b82525050565b6000602082019050611ab86000830184611a94565b92915050565b600080600060608486031215611ad757611ad6611985565b5b6000611ae5868287016119d3565b9350506020611af6868287016119d3565b9250506040611b0786828701611a09565b9150509250925092565b600060ff82169050919050565b611b2781611b11565b82525050565b6000602082019050611b426000830184611b1e565b92915050565b600060208284031215611b5e57611b5d611985565b5b6000611b6c848285016119d3565b91505092915050565b600080600060608486031215611b8e57611b8d611985565b5b6000611b9c86828701611a09565b9350506020611bad86828701611a09565b9250506040611bbe868287016119d3565b9150509250925092565b6000604082019050611bdd6000830185611a94565b611bea6020830184611a94565b9392505050565b60008060408385031215611c0857611c07611985565b5b6000611c16858286016119d3565b9250506020611c27858286016119d3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c7857607f821691505b602082108103611c8b57611c8a611c31565b5b50919050565b611c9a816119aa565b82525050565b6000602082019050611cb56000830184611c91565b92915050565b600081519050611cca816119f2565b92915050565b600060208284031215611ce657611ce5611985565b5b6000611cf484828501611cbb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d37826119e8565b9150611d42836119e8565b9250828203905081811115611d5a57611d59611cfd565b5b92915050565b6000611d6b826119e8565b9150611d76836119e8565b9250828202611d84816119e8565b91508282048414831517611d9b57611d9a611cfd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ddc826119e8565b9150611de7836119e8565b925082611df757611df6611da2565b5b828204905092915050565b6000604082019050611e176000830185611c91565b611e246020830184611a94565b9392505050565b611e3481611a5e565b8114611e3f57600080fd5b50565b600081519050611e5181611e2b565b92915050565b600060208284031215611e6d57611e6c611985565b5b6000611e7b84828501611e42565b91505092915050565b6000606082019050611e996000830186611c91565b611ea66020830185611a94565b611eb36040830184611a94565b949350505050565b6000611ec6826119e8565b9150611ed1836119e8565b9250828201905080821115611ee957611ee8611cfd565b5b9291505056fea26469706673582212208615fac663c77c37db0e4580569ff58bba082543429b10ecdedb04cebc92b2e664736f6c63430008140033a264697066735822122004f3c8f461a2554be03bad4bb8b6759e7d84cedb05a2e66d8412b0cc8ea50a1764736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 799,
        "contract": "contracts/core/Factory.sol:PoolFactory",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 803,
        "contract": "contracts/core/Factory.sol:PoolFactory",
        "label": "feeReceiverSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 809,
        "contract": "contracts/core/Factory.sol:PoolFactory",
        "label": "getPairs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 812,
        "contract": "contracts/core/Factory.sol:PoolFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}